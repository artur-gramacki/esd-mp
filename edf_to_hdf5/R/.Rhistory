ylab = "Frequency [Hz]",
xaxt = "n",
yaxt = "n",
)
############################################################################################
# Read sample bin file, then execute STFT
############################################################################################
fn <- "sample/sample.bin"
fs <- file.size(fn)
fh <- file(fn, "rb")
data <- NA
for (k in 1:(fs / 8)) { # 8: size of double in bytes
b <- readBin(con = fh, what = "raw", n = 8)
# swap to use little-endian
hex_str <- paste(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], sep = "")
# https://stackoverflow.com/questions/39461349/converting-hex-format-to-float-numbers-in-r
# Convert to raw
raw_vec <- as.raw(strtoi(substring(hex_str, (step <- seq(1, nchar(hex_str), by = 2)), step + 1), 16))
# Convert raw to double
num <- readBin(raw_vec, what = "double", n = 1, size = 8, , endian = "little")
data[k] <- num
}
close(fh)
# Much slower but gives t-f maps with better resolution in f axis
ft <- e1071::stft(X = data, win = 128, inc = 1, coef = 512)
#ft <- e1071::stft(X = data, win = 128, inc = 1, coef = 64)
# y axis limit to fmax Hz, our EEG recordings' sampling freq = 256
# 256 / 2: Nyquist freq
fmax <- 32
p <- (ncol(ft$values) * fmax) / (256 / 2)
par(pty = "s")
graphics::image(
z = ft$values[,1:p],
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]",
xaxt = "n",
yaxt = "n",
)
axis(
side = 1,
at = seq(from = 0, to = 1, length.out = 5),
labels = seq(from = 0, to = 10, length.out = 5)
)
axis(
side = 2,
at = seq(from = 0, to = 1, length.out = 9),
labels = seq(from = 0, to = 32, length.out = 9)
)
############################################################################################
# Create RData file from STFT results (64 x 64 pixels in size)
############################################################################################
zz <- ft$values[,1:p]
rr <- raster::raster(nrow = ncol(zz), ncol = nrow(zz))
rr[] <- t(zz)
tt <- raster::raster(ncol = 64, nrow = 64)
tt <- raster::resample(rr, tt)
m2 <- matrix(tt@data@values, 64, 64)
# Rescaling to the range 0-1
# Protect against a situation where a zero appears in the denominator
if (max(m2) - min(m2) == 0) {
tf.matrix <- matrix(0, 64, 64)
} else {
tf.matrix <- (m2 - min(m2)) / (max(m2) - min(m2))
}
save(tf.matrix, file = "sample/sample_STFT.RData")
############################################################################################
# Read Rdata file form disk and display it's content on the screen
# t-f map is 64x64 pixels in size. Then save it as png file.
############################################################################################
load("sample/sample_STFT.RData")
par(pty = "s")
graphics::image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]" )
########################################################################
# Figure 2b
########################################################################
out2 <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
outMode = "RData",
fileName = "Figure_4.RData",
fileSize = c(64, 64)
)
load("Figure_4.RData")
par(mfcol = c(1, 1), pty = "m")
par(pty = "s")
par(mai = c(0.9, 0.9, 0.2, 0.4))
image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]",
)
########################################################################
# Figure 2b
########################################################################
out2 <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
outMode = "RData",
fileName = "Figure_2.RData",
fileSize = c(64, 64)
)
########################################################################
# Figure 2a
########################################################################
SQLiteFile = "sample/data_for_figures_2.db"
out <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 8,
displayCrosses = TRUE,
grid = FALSE,
crossesColor = "white",
palette = "my custom palette",
rev = T,
outMode = "plot",
plotSignals = FALSE
)
########################################################################
# Figure 2b
########################################################################
out2 <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
outMode = "RData",
fileName = "sample/Figure_2.RData",
fileSize = c(64, 64)
)
########################################################################
# Figure 2a
########################################################################
SQLiteFile = "sample/data_for_figures_2.db"
out <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 8,
displayCrosses = TRUE,
grid = FALSE,
crossesColor = "white",
palette = "my custom palette",
rev = T,
outMode = "plot",
plotSignals = FALSE
)
########################################################################
# Figure 2b
########################################################################
out2 <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
outMode = "RData",
fileName = "sample/Figure_2.RData",
fileSize = c(64, 64)
)
load("Figure_2.RData")
load("sample/Figure_2.RData")
par(mfcol = c(1, 1), pty = "m")
par(pty = "s")
par(mai = c(0.9, 0.9, 0.2, 0.4))
image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]",
)
file.remove("sample/Figure_2.RData")
########################################################################
# Figure 3
########################################################################
par(mfcol = c(8, 1), pty = "m")
par(mai = c(0, 0.8, 0, 0))
par(mgp = c(0, 1, 0))
range <- range(out$originalSignal)
atoms <- matrix(nrow = nrow(out$gaborFunctions), ncol = out$epochSize)
for (i in 1:50) {
atoms[i,] <- out$gaborFunctions[i,] * sqrt(out$atoms$energy[i] * out$f)
}
plot(out$originalSignal, type = "l", xaxt = "n", yaxt = "n", bty = "n",  xlab = "n", ylab = "")
mtext("Signal", side = 2, line = 0, las = 2)
plot(out$reconstructedSignal, type = "l", xaxt = "n", yaxt = "n", bty = "n",  xlab = "", ylab = "")
mtext("Reconstr.", side = 2, line = 0, las = 2)
plot(atoms[1,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 1", side = 2, line = 0, las = 2)
plot(atoms[2,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 2", side = 2, line = 0, las = 2)
plot(atoms[3,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 3", side = 2, line = 0, las = 2)
plot(atoms[4,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 4", side = 2, line = 0, las = 2)
plot(atoms[5,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 5", side = 2, line = 0, las = 2)
sum <- 0
for (j in 1:20) {
sum <- sum + atoms[j,]
}
plot(sum, type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "" , col = "red")
mtext("A1-A20", side = 2, line = 0, las = 2)
source("my_custom_palette.R")
source("funs.R")
############################################################################################
# MP decomposition of a sample EEG data (saved as 64-bit binary file)
# Sampling frequency was 256HZ, the data is 10s long
# So, the size of the sample.bin file is: 256 x 10 x 8 = 20480 bytes
############################################################################################
command <- paste(
"../empi_1.0.3/empi.exe ",
"sample/sample.bin ",
"sample/sample.db ",
"-f 256 -c 1 --channels 1 -o local --gabor -i 50 --input64",
sep = "")
system(command)
############################################################################################
# Display sample time-frequency map on the screen
############################################################################################
out <- mp2tf(
SQLiteFile = "sample/sample.db",
channel = 1,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 4,
displayCrosses = TRUE,
grid = FALSE,
crossesColor = "white",
palette = "my custom palette",
rev = TRUE,
outMode = "plot"
)
############################################################################################
# Save sample time-frequency map to the png file
############################################################################################
out <- mp2tf(
SQLiteFile = "sample/sample.db",
channel = 1,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
displayCrosses = TRUE,
crossesColor = "white",
grid = FALSE,
palette = "my custom palette",
outMode = "file",
fileName = "sample/sample.png",
fileSize = c(512, 512),
)
############################################################################################
# Save time-frequency map to RData file
############################################################################################
out <- mp2tf(
SQLiteFile = "sample/sample.db",
channel = 1,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
displayCrosses = FALSE,
grid = FALSE,
palette = "my custom palette",
outMode = "RData",
fileName = "sample/sample.RData",
fileSize = c(64, 64),
)
############################################################################################
# Read RData file form disk and display it's content on the screen
# t-f map is 64x64 pixels in size. Then save it as png file.
############################################################################################
load("sample/sample.RData")
par(pty = "s")
graphics::image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]" )
graphics.off()
png("sample/sample_64x64pixels.png", width = 64, height = 64, units = "px", type = "cairo-png")
par(pty = "m", mai = c(0, 0, 0, 0))
graphics::image(z = tf.matrix, col = my_custom_palette)
dev.off()
############################################################################################
# Read sample bin file, then execute STFT
############################################################################################
fn <- "sample/sample.bin"
fs <- file.size(fn)
fh <- file(fn, "rb")
data <- NA
for (k in 1:(fs / 8)) { # 8: size of double in bytes
b <- readBin(con = fh, what = "raw", n = 8)
# swap to use little-endian
hex_str <- paste(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], sep = "")
# https://stackoverflow.com/questions/39461349/converting-hex-format-to-float-numbers-in-r
# Convert to raw
raw_vec <- as.raw(strtoi(substring(hex_str, (step <- seq(1, nchar(hex_str), by = 2)), step + 1), 16))
# Convert raw to double
num <- readBin(raw_vec, what = "double", n = 1, size = 8, , endian = "little")
data[k] <- num
}
close(fh)
# Much slower but gives t-f maps with better resolution in f axis
ft <- e1071::stft(X = data, win = 128, inc = 1, coef = 512)
#ft <- e1071::stft(X = data, win = 128, inc = 1, coef = 64)
# y axis limit to fmax Hz, our EEG recordings' sampling freq = 256
# 256 / 2: Nyquist freq
fmax <- 32
p <- (ncol(ft$values) * fmax) / (256 / 2)
par(pty = "s")
graphics::image(
z = ft$values[,1:p],
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]",
xaxt = "n",
yaxt = "n",
)
axis(
side = 1,
at = seq(from = 0, to = 1, length.out = 5),
labels = seq(from = 0, to = 10, length.out = 5)
)
axis(
side = 2,
at = seq(from = 0, to = 1, length.out = 9),
labels = seq(from = 0, to = 32, length.out = 9)
)
############################################################################################
# Create RData file from STFT results (64 x 64 pixels in size)
############################################################################################
zz <- ft$values[,1:p]
rr <- raster::raster(nrow = ncol(zz), ncol = nrow(zz))
rr[] <- t(zz)
tt <- raster::raster(ncol = 64, nrow = 64)
tt <- raster::resample(rr, tt)
m2 <- matrix(tt@data@values, 64, 64)
# Rescaling to the range 0-1
# Protect against a situation where a zero appears in the denominator
if (max(m2) - min(m2) == 0) {
tf.matrix <- matrix(0, 64, 64)
} else {
tf.matrix <- (m2 - min(m2)) / (max(m2) - min(m2))
}
save(tf.matrix, file = "sample/sample_STFT.RData")
############################################################################################
# Read Rdata file form disk and display it's content on the screen
# t-f map is 64x64 pixels in size. Then save it as png file.
############################################################################################
load("sample/sample_STFT.RData")
par(pty = "s")
graphics::image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]" )
graphics.off()
png("sample/sample_STFT_64x64pixels.png", width = 64, height = 64, units = "px", type = "cairo-png")
par(pty = "m", mai = c(0, 0, 0, 0))
graphics::image(z = tf.matrix, col = my_custom_palette)
dev.off()
########################################################################
# Figure 2a
########################################################################
SQLiteFile = "sample/data_for_figures_2.db"
out <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 8,
displayCrosses = TRUE,
grid = FALSE,
crossesColor = "white",
palette = "my custom palette",
rev = T,
outMode = "plot",
plotSignals = FALSE
)
########################################################################
# Figure 2b
########################################################################
out2 <- mp2tf(
SQLiteFile,
channel = 12,
mode = "sqrt",
freqDivide = 4,
increaseFactor = 16,
outMode = "RData",
fileName = "sample/Figure_2.RData",
fileSize = c(64, 64)
)
load("sample/Figure_2.RData")
par(mfcol = c(1, 1), pty = "m")
par(pty = "s")
par(mai = c(0.9, 0.9, 0.2, 0.4))
image(
x = seq(0, 10, length.out = 64),
y = seq(0, 32, length.out = 64),
z = tf.matrix,
col = my_custom_palette,
xlab = "Time [s]",
ylab = "Frequency [Hz]",
)
file.remove("sample/Figure_2.RData")
########################################################################
# Figure 3
########################################################################
par(mfcol = c(8, 1), pty = "m")
par(mai = c(0, 0.8, 0, 0))
par(mgp = c(0, 1, 0))
range <- range(out$originalSignal)
atoms <- matrix(nrow = nrow(out$gaborFunctions), ncol = out$epochSize)
for (i in 1:50) {
atoms[i,] <- out$gaborFunctions[i,] * sqrt(out$atoms$energy[i] * out$f)
}
plot(out$originalSignal, type = "l", xaxt = "n", yaxt = "n", bty = "n",  xlab = "n", ylab = "")
mtext("Signal", side = 2, line = 0, las = 2)
plot(out$reconstructedSignal, type = "l", xaxt = "n", yaxt = "n", bty = "n",  xlab = "", ylab = "")
mtext("Reconstr.", side = 2, line = 0, las = 2)
plot(atoms[1,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 1", side = 2, line = 0, las = 2)
plot(atoms[2,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 2", side = 2, line = 0, las = 2)
plot(atoms[3,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 3", side = 2, line = 0, las = 2)
plot(atoms[4,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 4", side = 2, line = 0, las = 2)
plot(atoms[5,], type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "", col = "blue")
mtext("Atom 5", side = 2, line = 0, las = 2)
sum <- 0
for (j in 1:20) {
sum <- sum + atoms[j,]
}
plot(sum, type = "l", ylim = range, xaxt = "n", yaxt = "n", bty = "n", xlab = "", ylab = "" , col = "red")
mtext("A1-A20", side = 2, line = 0, las = 2)
# Set to TRUE to remove the given directories (if they are present) and recreate them
recreate_dirs <- TRUE
if(recreate_dirs) {
unlink(paste(dir, 'working/', sep = ""), recursive = TRUE, force = TRUE)
dir.create(paste(dir, 'working/', sep = ""))
dir.create(paste(dir, 'working/aux_files', sep = ""))
dir.create(paste(dir, 'working/bin_files', sep = ""))
dir.create(paste(dir, 'working/bin_files/eA_w10_c20', sep = ""))
dir.create(paste(dir, 'working/bin_files/eB_w10_c20', sep = ""))
dir.create(paste(dir, 'working/bin_files/eC_w10_c20', sep = ""))
dir.create(paste(dir, 'working/hdf5_files', sep = ""))
dir.create(paste(dir, 'working/hdf5_files_STFT', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eA_w10_c20', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eB_w10_c20', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eC_w10_c20', sep = ""))
dir.create(paste(dir, 'working/tf_maps', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eA_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eB_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eC_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eA_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eB_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eC_w10_c20_64_64', sep = ""))
}
dir <- "../"
python_dir <- "c:/Programy/miniconda3/"
# Set to TRUE to remove the given directories (if they are present) and recreate them
recreate_dirs <- TRUE
if(recreate_dirs) {
unlink(paste(dir, 'working/', sep = ""), recursive = TRUE, force = TRUE)
dir.create(paste(dir, 'working/', sep = ""))
dir.create(paste(dir, 'working/aux_files', sep = ""))
dir.create(paste(dir, 'working/bin_files', sep = ""))
dir.create(paste(dir, 'working/bin_files/eA_w10_c20', sep = ""))
dir.create(paste(dir, 'working/bin_files/eB_w10_c20', sep = ""))
dir.create(paste(dir, 'working/bin_files/eC_w10_c20', sep = ""))
dir.create(paste(dir, 'working/hdf5_files', sep = ""))
dir.create(paste(dir, 'working/hdf5_files_STFT', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eA_w10_c20', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eB_w10_c20', sep = ""))
dir.create(paste(dir, 'working/sqlitedb_files/eC_w10_c20', sep = ""))
dir.create(paste(dir, 'working/tf_maps', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eA_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eB_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps/eC_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eA_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eB_w10_c20_64_64', sep = ""))
dir.create(paste(dir, 'working/tf_maps_STFT/eC_w10_c20_64_64', sep = ""))
}
